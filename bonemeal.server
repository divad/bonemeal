#!/usr/bin/python

import urwid
import platform # for get hostname and configure
import os # for get network interfaces
import socket # for get ip from hostname
import subprocess # for sysexec
from netaddr import IPAddress, IPNetwork

SETUP_TITLE           = ' Red Hat Enterprise Linux 7 Server Installer';
PUPPET_MASTER         = 'desktop.puppet.soton.ac.uk';
PUPPET_MASTER_CA_CERT = '/mnt/build/ssl/desktop.puppet.soton.ac.uk.pem';
PUPPET_SSL_ROOT       = '/var/lib/puppet/ssl';
SETUP_VERSION         = '2015-08-06-01';

## NETWORK CONFIGS
NETWORKS_LIST = [IPNetwork("152.78.128.0/22"),
	IPNetwork("152.78.136.0/22"),
	IPNetwork("192.168.168.0/22"),
	IPNetwork("152.78.140.0/23"),
	IPNetwork("152.78.142.0/23"),
	IPNetwork("152.78.155.0/24"),
	IPNetwork("10.18.36.0/22")
]

ROUTERS_MAP = {
	"152.78.128.0/22":  '152.78.128.17',
	"152.78.136.0/22":  '152.78.137.254',
	"192.168.168.0/22": '192.168.171.254',
	"152.78.140.0/23":  '152.78.141.254',
	"152.78.142.0/23":  '152.78.143.254',
	"152.78.155.0/24":  '152.78.155.254',
	"10.18.36.0/22":    '10.18.39.254',
}

## TODO logging framework
## TODO syslog too?
## TODO rhel6 support
	
class BigTextDisplay:

	palette = [
		('edit', 'black', 'light gray'),
        ('header',       'white',      'dark red',   'bold'),
        ('label',       'white',      'dark blue',   'bold'),
		('bg','white','dark blue'),
		('error','yellow','dark blue')
		]

	start = True

	## core functions
	def main(self):
		self.setup_header_footer()
		self.loop = urwid.MainLoop(self.view_default(), self.palette, unhandled_input=self.unhandled_input)
		self.loop.run()

	def fatal(self,message):
		self.view_fatal_error(message)

	def switch_view(self,view):
		self.loop.widget = view
		self.loop.draw_screen()

	def setup_header_footer(self):
		self.header_text = urwid.Text(SETUP_TITLE)
		self.header = urwid.AttrWrap(self.header_text, 'header')
		self.footer_text = urwid.Text("bonemeal installer " + SETUP_VERSION)
		self.footer = urwid.AttrWrap(self.footer_text, 'header')

	def unhandled_input(self,key):
		if self.start:
			self.view_sethostname()
			self.start = False

	def sysexec(self,command):
		try:
			proc = subprocess.Popen(command,stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
			(stdoutdata, stderrdata) = proc.communicate()
			return (proc.returncode,str(stdoutdata),str(stderrdata))
		except Exception as ex:
			#syslog.syslog("sysexec exception: " + str(ex))
			return (1,"",str(ex))

	## functions to lookup data from the local system
	def get_system_hostname(self):
		name = platform.node()
		return name

	def get_network_interfaces(self):
		try:
			entries = os.listdir("/sys/class/net")
		except OSError as e:
			self.fatal("Could not obtain the list of local network interfaces: " + str(e))
			return None

		try:
			entries.remove('lo')
		except ValueError as ex:
			pass

		return entries

	def get_ip_from_hostname(self):
		try:
				return socket.gethostbyname(self.hostname)
		except socket.gaierror as e:
			return ""

	## view functions

	def view_default(self):

		div = urwid.Divider()
		bt = urwid.BigText('I am ready to build', font=urwid.font.HalfBlock5x4Font())
		btwp = urwid.Padding(bt, "center", 'clip')

		txt = urwid.Text(u"Press any key to get started",align='center')
		pile1 = urwid.Pile([btwp,div,txt])
		pile1 = urwid.Filler(pile1, 'middle', None, 7)

		frame = urwid.Frame(header=self.header, body=pile1, footer=self.footer)
		return urwid.AttrMap(frame, 'bg')

	def view_choosenet(self):
		interfaces = self.get_network_interfaces()

		if interfaces == None:
			return

		if len(interfaces) == 1:
			## set interface to the only one in the list
			self.netif = chosen_interface
			self.view_setipaddr()
			return

		btns = []
		for name in interfaces:
			button = urwid.Button(name)
			urwid.connect_signal(button, 'click', self.handle_interfaces, name)
			#btns.append(urwid.AttrMap(button, None, focus_map='reversed'))
			btns.append(button)

		listbox = urwid.ListBox(urwid.SimpleFocusListWalker(btns))
		listbox = urwid.BoxAdapter(listbox,len(interfaces))
		# so clayton made me write the max thing. what it does is get the max width/length of the strings in the network list
		listbox = urwid.Padding(listbox, "left", width=max([len(name) for name in interfaces]) + 4)

		div = urwid.Divider()

		htxt = urwid.Text(u"Please choose a network interface to configure.",align='left')

		pile = urwid.Pile([div,htxt,div,listbox])

		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')

		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

	def handle_interfaces(self,button,chosen_interface):
		self.netif = chosen_interface
		self.view_setipaddr()

	def handle_exit(self,button):
		raise urwid.ExitMainLoop()

	def handle_hostname(self,button):
		self.hostname = self.hostname_edit.get_edit_text()

		if self.hostname.endswith(".soton.ac.uk"):
			self.hostname = self.hostname = self.hostname[:-len(".soton.ac.uk")]

		if "." in self.hostname:
			self.hostname_error.set_text("That hostname is invalid. Please try again.")
			return

		# Strip off the domain
		self.fqdn = self.hostname + ".soton.ac.uk"

		self.footer_text.set_text(self.hostname)
		self.view_choosenet()

	def handle_ipaddr(self,button):
		self.ipaddr = self.ipaddr_edit.get_edit_text()
		self.dhcp = False

		## validate the ip address
		try:
			address = IPAddress(self.ipaddr)
		except Exception as ex:
			self.ipaddr_error.set_text("That IP address is invalid. Please try again.")
			return

		## Now try to recognise the network it is within
		found = False
		for ipnet in NETWORKS_LIST:
			if address in ipnet:
				found = True
				self.netmask = ipnet.netmask
				self.router = ROUTERS_MAP[str(ipnet)]
				break

		if not found:
			self.ipaddr_error.set_text("That network is not valid for servers.")
			return	

	#	self.ipaddr_error.set_text("VALID! " + str(self.router) + " " + str(self.netmask))

		self.view_go()	

	def handle_dhcp(self,button):
		self.dhcp = True
		self.view_go()	

	def view_auth(self):

		div = urwid.Divider()

		htxt = urwid.Text(u"Welcome to the setup wizard. Please enter the following information. Use the arrow keys to move between fields.",align='left')
		ed = urwid.Edit( caption=('label',"      Hostname:  "),edit_text=self.get_system_hostname())
		ed = urwid.AttrMap(ed, 'edit')

		mtxt = urwid.Text(u"Please enter your University username and password in order to register this system.",align='left')

		ed4 = urwid.Edit(caption=('label'," Your Username:  "))
		ed4 = urwid.AttrMap(ed4, 'edit')
		ed5 = urwid.Edit(caption=('label'," Your Password:  "))
		ed5 = urwid.AttrMap(ed5, 'edit')

		pile = urwid.Pile([div,htxt,div,ed,div,mtxt,div,ed4,div,ed5])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')

		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)

		self.switch_view(urwid.AttrMap(frame, 'bg'))
		
	def view_sethostname(self):
		div = urwid.Divider()

		htxt = urwid.Text(u"Welcome to the installation wizard. Please enter the hostname of the server. Use the arrow keys to move between fields.",align='left')

		self.hostname_edit = urwid.Edit( caption=('label'," Hostname:  "),edit_text=self.get_system_hostname())
		ed = urwid.AttrMap(self.hostname_edit, 'edit')

		button = urwid.Button("Continue")
		urwid.connect_signal(button, 'click', self.handle_hostname)
		button = urwid.Padding(button,"center", width=12)

		self.hostname_error = urwid.Text(u"",align='left')
		err = urwid.AttrMap(self.hostname_error, 'error')

		pile = urwid.Pile([div,htxt,div,ed,div,button,div,err])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')
		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

	def view_setipaddr(self):
		div = urwid.Divider()

		htxt = urwid.Text(u"Please your chosen IP address for interface " + self.netif,align='left')

		self.ipaddr_edit = urwid.Edit( caption=('label'," IP Address:  "),edit_text=self.get_ip_from_hostname())
		ed = urwid.AttrMap(self.ipaddr_edit, 'edit')

		mtxt = urwid.Text(u"If present the IP address above was calculated from the hostname you gave earlier. The netmask and router/gateway will be determined automatically based on the network the address is within. DHCP is not recommended on production servers but can be used on development systems for testing.",align='left')

		button1 = urwid.Button("Continue")
		urwid.connect_signal(button1, 'click', self.handle_ipaddr)

		button2 = urwid.Button("Use DHCP")
		urwid.connect_signal(button2, 'click', self.handle_dhcp)
		
		col = urwid.Columns([button1,button2],4)

		col = urwid.Padding(col,"center", width=28)

		self.ipaddr_error = urwid.Text(u"",align='left')
		err = urwid.AttrMap(self.ipaddr_error, 'error')

		pile = urwid.Pile([div,htxt,div,ed,div,col,div,err,div,mtxt])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')
		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

	def view_go(self):
		div = urwid.Divider()

		self.msgs = urwid.SimpleListWalker([urwid.Text(" ",align='left'),urwid.Text(" Starting post-install",align='left')])
		listbox = urwid.ListBox(self.msgs)

		frame = urwid.Frame(header=self.header, body=listbox, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

		## now do the install
		self.configure()

	def view_fatal_error(self,message):
		div = urwid.Divider()

		bt = urwid.BigText('oh no!', font=urwid.font.HalfBlock5x4Font())
		btwp = urwid.Padding(bt, "center", 'clip')
		htxt = urwid.Text(u"A fatal error occured",align='left')
		mtxt = urwid.Text(message,align='left')

		button = urwid.Button("Exit installer")
		urwid.connect_signal(button, 'click', self.handle_exit)
		button = urwid.Padding(button,"center", width=18)

		pile = urwid.Pile([div,btwp,div,htxt,div,mtxt,div,button])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')
		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

	def add_msg(self,message):
		self.msgs.append(urwid.Text(" " + message,align='left'))

	def configure(self):
		## set hostname
		## configure networking
		## restart network
		## register with rhn
		## apply updates
		## install puppet
		## wait for cert...

		## work out OS version
		(distname, distversion, distid) = platform.linux_distribution()

		if distid == 'Maipo':
			self.release = 7
			self.add_msg("Detected operating system as RHEL7")
#		elif distid == 'Santiago':
#			self.release = 6
#			self.add_msg("Detected operating system as RHEL6")
		else:
			self.fatal("Your operating system was not recognised. This installer supports RHEL6 or RHEL7.")
			return None

		## set hostname
		if self.release == 7:
			(code, stdout, stderr) = self.sysexec(["/bin/hostnamectl","set-hostname",self.hostname])

			if code != 0:
				self.add_msg("FATAL: could not set hostname:")
				self.add_msg(stdout)
				self.add_msg(stderr)
				return
			else:
				self.add_msg("Short hostname set to '" + self.hostname + "'")

		## do networking

if '__main__'==__name__:
	BigTextDisplay().main()
	#BigTextDisplay().get_network_interfaces()

