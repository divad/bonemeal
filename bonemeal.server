#!/usr/bin/python

import urwid
import platform   # for get hostname and configure
import os         # for get network interfaces
import os.path    # for install section
import socket     # for get ip from hostname
import subprocess # for sysexec
import requests   # for auth/register
import syslog     # syslogging
import logging
from logging.handlers import SysLogHandler

from netaddr import IPAddress, IPNetwork

SETUP_TITLE           = ' Red Hat Enterprise Linux 7 Server Installer';
SETUP_VERSION         = '2015-08-18-2';
PE_INSTALL_CMD        = 'curl -k https://poc.puppet.soton.ac.uk:8140/packages/current/install.bash | bash'
PUPPET_SSL_ROOT       = '/etc/puppetlabs/puppet/ssl/'
PUPPET_BINARY         = '/usr/local/bin/puppet'
DIORITE_URL           = 'https://poc.puppet.soton.ac.uk:5000/getcert/user'
DIORITE_SSL_CA_FILE   = '/tmp/puppetca.pem'

## NETWORK CONFIGS
NETWORKS_LIST = [IPNetwork("152.78.128.0/22"),
	IPNetwork("152.78.136.0/22"),
	IPNetwork("192.168.168.0/22"),
	IPNetwork("152.78.140.0/23"),
	IPNetwork("152.78.142.0/23"),
	IPNetwork("152.78.155.0/24"),
	IPNetwork("10.18.36.0/22")
]

ROUTERS_MAP = {
	"152.78.128.0/22":  '152.78.128.17',
	"152.78.136.0/22":  '152.78.137.254',
	"192.168.168.0/22": '192.168.171.254',
	"152.78.140.0/23":  '152.78.141.254',
	"152.78.142.0/23":  '152.78.143.254',
	"152.78.155.0/24":  '152.78.155.254',
	"10.18.36.0/22":    '10.18.39.254',
}

## TODO rhel6 support
	
class Bonemeal:

	palette = [
		('edit', 'black', 'light gray'),
        ('header',       'white',      'dark red',   'bold'),
        ('label',       'white',      'dark blue',   'bold'),
		('bg','white','dark blue'),
		('error','yellow','dark blue')
		]

	start = True

################################################################################

	def main(self):
		# logging
		logging.basicConfig(level=logging.INFO)
		self.log = logging.getLogger("bonemeal")
		fileHandler = logging.FileHandler('/root/install.log')
		fileHandler.setLevel(logging.INFO)
		self.log.addHandler(fileHandler)

		## we dont syslog because that appears on the tty and messes graphics :(

		# make tab work like down arrow
		urwid.command_map['tab'] = 'cursor down'

		## log the startup
		self.log.info("bonemeal installer version " + SETUP_VERSION + " starting up")

		self.setup_header_footer()
		self.loop = urwid.MainLoop(self.view_default(), self.palette, unhandled_input=self.unhandled_input)
		self.loop.run()

	def fatal(self,message):
		self.log.critical("fatal error: " + message)
		self.view_fatal_error(message)

	def switch_view(self,view):
		self.loop.widget = view
		self.loop.draw_screen()

	def setup_header_footer(self):
		self.header_text = urwid.Text(SETUP_TITLE)
		self.header = urwid.AttrWrap(self.header_text, 'header')
		self.footer_text = urwid.Text("bonemeal installer " + SETUP_VERSION)
		self.footer = urwid.AttrWrap(self.footer_text, 'header')

	def unhandled_input(self,key):
		if self.start:
			self.view_sethostname()
			self.start = False
		elif key == 'Q':
			raise urwid.ExitMainLoop()

	def sysexec(self,command,shell=False):
		self.log.info("executing command: " + str(command))

		try:
			proc = subprocess.Popen(command,stdout=subprocess.PIPE, stderr=subprocess.STDOUT,shell=shell)
			(stdoutdata, stderrdata) = proc.communicate()
			return (proc.returncode,str(stdoutdata),str(stderrdata))
		except Exception as ex:
			self.log.error("command generated an exception: " + str(ex))
			return (1,"",str(ex))

	def handle_exit(self,button):
		raise urwid.ExitMainLoop()

################################################################################

	## functions to lookup data from the local system
	def get_system_hostname(self):
		name = platform.node()
		self.log.info("detected hostname as " + name)
		return name

	def get_network_interfaces(self):
		try:
			entries = os.listdir("/sys/class/net")
		except OSError as e:
			self.fatal("Could not obtain the list of local network interfaces: " + str(e))
			return None

		try:
			entries.remove('lo')
		except ValueError as ex:
			pass

		return entries

	def get_ip_from_hostname(self):
		try:
			ip = socket.gethostbyname(self.hostname)
			self.log.info("IP address found in DNS for hostname: " + ip)
			return ip
		except socket.gaierror as e:
			self.log.info("No IP address found in DNS for given hostname")
			return ""

################################################################################
## DEFAULT VIEW

	def view_default(self):

		div = urwid.Divider()
		bt = urwid.BigText('I am ready to build', font=urwid.font.HalfBlock5x4Font())
		btwp = urwid.Padding(bt, "center", 'clip')

		txt = urwid.Text(u"Press any key to get started",align='center')
		pile1 = urwid.Pile([btwp,div,txt])
		pile1 = urwid.Filler(pile1, 'middle', None, 7)

		frame = urwid.Frame(header=self.header, body=pile1, footer=self.footer)
		return urwid.AttrMap(frame, 'bg')

################################################################################
## SET HOSTNAME

	def view_sethostname(self):
		div = urwid.Divider()

		htxt = urwid.Text(u"Welcome to the installation wizard. Please enter the hostname of the server. Use the arrow keys to move between fields.",align='left')

		self.hostname_edit = urwid.Edit( caption=('label'," Hostname:  "),edit_text=self.get_system_hostname())
		ed = urwid.AttrMap(self.hostname_edit, 'edit')

		button = urwid.Button("Continue")
		urwid.connect_signal(button, 'click', self.handle_hostname)
		button = urwid.Padding(button,"center", width=12)

		self.hostname_error = urwid.Text(u"",align='left')
		err = urwid.AttrMap(self.hostname_error, 'error')

		pile = urwid.Pile([div,htxt,div,ed,div,button,div,err])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')
		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

	def handle_hostname(self,button):
		self.hostname = self.hostname_edit.get_edit_text()

		if self.hostname.endswith(".soton.ac.uk"):
			self.log.info("stripping .soton.ac.uk from given hostname")
			self.hostname = self.hostname = self.hostname[:-len(".soton.ac.uk")]

		if "." in self.hostname:
			self.hostname_error.set_text("That hostname is invalid. Please try again.")
			return

		self.log.info("chosen hostname: " + self.hostname)

		# Strip off the domain
		self.fqdn = self.hostname + ".soton.ac.uk"

		self.log.info("chosen fqdn: " + self.fqdn)

		self.footer_text.set_text(self.fqdn)
		self.view_choosenet()

################################################################################
## CHOOSE NETWORK INTERFACE

	def view_choosenet(self):
		interfaces = self.get_network_interfaces()

		if interfaces == None:
			return

		if len(interfaces) == 1:
			## set interface to the only one in the list
			self.netif = interfaces[0]
			self.log.info("only one network interface: " + self.netif)
			self.footer_text.set_text(self.fqdn + " / " + self.netif)
			self.view_setipaddr()
			return

		btns = []
		for name in interfaces:
			button = urwid.Button(name)
			urwid.connect_signal(button, 'click', self.handle_interfaces, name)
			btns.append(button)

		listbox = urwid.ListBox(urwid.SimpleFocusListWalker(btns))
		listbox = urwid.BoxAdapter(listbox,len(interfaces))
		# so clayton made me write the max thing. what it does is get the max width/length of the strings in the network list
		listbox = urwid.Padding(listbox, "left", width=max([len(name) for name in interfaces]) + 4)

		div = urwid.Divider()

		htxt = urwid.Text(u"Please choose a network interface to configure.",align='left')

		pile = urwid.Pile([div,htxt,div,listbox])

		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')

		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

	def handle_interfaces(self,button,chosen_interface):
		self.netif = chosen_interface
		self.log.info("chosen network interface: " + self.netif)
		self.footer_text.set_text(self.fqdn + " / " + self.netif)
		self.view_setipaddr()

################################################################################
## SET IP ADDRESS

	def view_setipaddr(self):
		div = urwid.Divider()

		htxt = urwid.Text(u"Please your chosen IP address for interface " + self.netif,align='left')

		self.ipaddr_edit = urwid.Edit( caption=('label'," IP Address:  "),edit_text=self.get_ip_from_hostname())
		ed = urwid.AttrMap(self.ipaddr_edit, 'edit')

		mtxt = urwid.Text(u"If present the IP address above was calculated from the hostname you gave earlier. The netmask and router/gateway will be determined automatically based on the network the address is within. DHCP is not recommended on production servers but can be used on development systems for testing.",align='left')

		button1 = urwid.Button("Continue")
		urwid.connect_signal(button1, 'click', self.handle_ipaddr)

		button2 = urwid.Button("Use DHCP")
		urwid.connect_signal(button2, 'click', self.handle_dhcp)
		
		col = urwid.Columns([button1,button2],4)

		col = urwid.Padding(col,"center", width=28)

		self.ipaddr_error = urwid.Text(u"",align='left')
		err = urwid.AttrMap(self.ipaddr_error, 'error')

		pile = urwid.Pile([div,htxt,div,ed,div,col,div,err,div,mtxt])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')
		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

	def handle_ipaddr(self,button):
		self.ipaddr = self.ipaddr_edit.get_edit_text()
		self.dhcp = False

		## validate the ip address
		try:
			address = IPAddress(self.ipaddr)
		except Exception as ex:
			self.ipaddr_error.set_text("That IP address is invalid. Please try again.")
			return

		## Now try to recognise the network it is within
		found = False
		for ipnet in NETWORKS_LIST:
			if address in ipnet:
				found = True
				self.netmask = ipnet.netmask
				self.router = ROUTERS_MAP[str(ipnet)]
				break

		if not found:
			self.ipaddr_error.set_text("That network is not valid for servers. You can choose DHCP if you wish instead.")
			return	

		self.log.info("static networking chosen")
		self.log.info("chosen IP address: " + str(self.ipaddr))
		self.log.info("router: " + str(self.router))
		self.log.info("netmask: " + str(self.netmask))

		self.footer_text.set_text(self.fqdn + " / " + self.netif + " / " + self.ipaddr)
		self.view_auth()	

	def handle_dhcp(self,button):
		self.log.info("dhcp networking chosen")
		self.dhcp = True
		self.footer_text.set_text(self.fqdn + " / " + self.netif + " / dhcp")
		self.view_auth()	

################################################################################
## AUTHENTICATE / REGISTER
		
	def view_auth(self):

		div = urwid.Divider()

		mtxt = urwid.Text(u"Please enter your University username and password in order to register this system.",align='left')

		self.username = urwid.Edit(caption=('label'," Username:  "),allow_tab=False)
		edituser = urwid.AttrMap(self.username, 'edit')
		self.password = urwid.Edit(caption=('label'," Password:  "),mask="*")
		editpass = urwid.AttrMap(self.password, 'edit')

		button1 = urwid.Button("Continue")
		urwid.connect_signal(button1, 'click', self.handle_auth)
		button1 = urwid.Padding(button1,"center", width=12)

		self.auth_error = urwid.Text(u"",align='left')
		err = urwid.AttrMap(self.auth_error, 'error')

		pile = urwid.Pile([div,mtxt,div,edituser,div,editpass,div,button1,div,err])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')

		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

	def handle_auth(self,button):
		## python requests call with SSL...
		try:
			payload = {'hostname': self.fqdn, 'username': self.username.get_edit_text(), 'password': self.password.get_edit_text()}
			r = requests.post(DIORITE_URL, data=payload, verify = DIORITE_SSL_CA_FILE)
		except Exception as ex:
			self.log.error("error contacting registration server: " + str(ex))
			self.auth_error.set_text("Error contacting registration server: " + str(ex))
			return				

		if r.status_code == 200:
			try:
				self.json = r.json()
				self.puppet_private_key = self.json['private_key']
				self.puppet_public_key  = self.json['public_key']
				self.puppet_cert        = self.json['cert']
			except Exception as ex:
				self.log.error("failed to parse response from registration server: " + str(ex))
				self.auth_error.set_text("Failed to parse return response: " + str(ex))
				return

			self.view_go()
			return	
		elif r.status_code == 403:
			self.auth_error.set_text("Authentication failed: Incorrect username/password")
			return
		else:
			self.log.error("unexpected return code from registration server: " + str(r.status_code))
			self.auth_error.set_text("Registration failed: Error code " + str(r.status_code))
			return

################################################################################
## DO INSTALL "GO"

	def view_go(self):
		div = urwid.Divider()

		self.msgs = urwid.SimpleFocusListWalker([urwid.Text(" ",align='left'),urwid.Text(" Starting post-install",align='left')])
		self.msgs_box = urwid.ListBox(self.msgs)

		frame = urwid.Frame(header=self.header, body=self.msgs_box, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

		## now do the install
		self.configure()

	def add_msg(self,message):
		self.log.info(message)
		self.msgs.append(urwid.Text(" " + message.rstrip(),align='left'))
		self.loop.draw_screen()
		#self.msgs_box.set_focus(len(self.msgs_box.body))
		#self.msgs_box.set_focus(self.msgs.focus + 1)

	def configure(self):
		## work out OS version
		(distname, distversion, distid) = platform.linux_distribution()

		if distid == 'Maipo':
			self.release = 7
			self.add_msg("Detected operating system as RHEL7")
		elif distid == 'Santiago':
			self.release = 6
			self.add_msg("Detected operating system as RHEL6")
		else:
			self.fatal("This operating system was not recognised. This installer supports RHEL6 or RHEL7.")
			return None

		## set hostname
		if self.release == 7:
			(code, stdout, stderr) = self.sysexec(["/bin/hostnamectl","set-hostname",self.hostname])

			if code != 0:
				self.add_msg("FATAL: could not set hostname:")
				self.add_msg(stdout)
				self.add_msg(stderr)
				return
			else:
				self.add_msg("Short hostname set to '" + self.hostname + "'")
		elif self.release == 6:
			## TODO fix
			pass

		## set fqdn if not using dhcp
		if self.dhcp == False:
			try:
				with open("/etc/hosts", "a") as hosts_file:
					hosts_file.write(self.ipaddr + "\t" + self.fqdn + "\t" + self.hostname)
			except Exception as e:
				self.add_msg("WARN: could not set fqdn in /etc/hosts:")
				self.add_msg(str(e))

		## todo dns domain name for dhcp (/etc/dnsdomainname maybe?)

		## do networking config file

		## restart the network interface using ifdown/ifup
		self.add_msg("Stopping network manager")
		(code, stdout, stderr) = self.sysexec(["/bin/systemctl","stop","NetworkManager"])

		if code != 0:
			self.add_msg("FATAL: could not stop network manager")
			self.add_msg(stdout)
			self.add_msg(stderr)
			return

		## check the config file exists (it should...)
		self.add_msg("Attempting to read existing network configuration")
		network_config_file = "/etc/sysconfig/network-scripts/ifcfg-" + self.netif
		if os.path.isfile(network_config_file): 
			try:
				with open(network_config_file, "r") as netcfg_file:
					netcfg = netcfg_file.readlines()
			except Exception as e:
				self.add_msg("WARN: could not read network config file " + network_config_file)
				self.add_msg("WARN: Because I can't read the existing config file THIS IS UNLIKELY TO WORK!")
				self.add_msg(str(e))
				netcfg = []
		else:
			self.add_msg("WARN: No existing network configuration file found for interface " + self.netif)
			self.add_msg("WARN: Because there is no existing config file THIS IS UNLIKELY TO WORK!")
			netcfg = []

		self.add_msg("Generating new network configuration")

		## remove parts of the existing file we dont want
		netcfg = [x for x in netcfg if self.netcfg_remove(x)]

		## now add in what we want
		netcfg.append("PEERDNS=no\n")

		if self.dhcp:
			netcfg.append("BOOTPROTO=dhcp\n")
		else:
			netcfg.append("BOOTPROTO=static\n")
			netcfg.append("IPADDRESS=" + self.ipaddr + "\n")
			netcfg.append("NETMASK=" + str(self.netmask) + "\n")
			netcfg.append("GATEWAY=" + self.router + "\n")

		if self.release == 6:
			netcfg.append("NM_CONTROLLED=no\n")

		#for line in netcfg:
		#	self.add_msg(line)

		## now write out the file
		self.add_msg("Saving new network configuration")
		try:
			with open(network_config_file, "w") as fp:
				for line in netcfg:
					fp.write(line)
			self.add_msg("Saved new network configuration")
		except Exception as e:
			self.add_msg("FATAL: could not write to network config file " + network_config_file)
			self.add_msg(str(e))
			return

		## restart the network interface using ifdown/ifup
		self.add_msg("Stopping network interface " + self.netif)
		(code, stdout, stderr) = self.sysexec(["/sbin/ifdown",self.netif])

		if code != 0:
			self.add_msg("FATAL: ifdown " + self.netif + " failed")
			self.add_msg(stdout)
			self.add_msg(stderr)
			return

		self.add_msg("Starting network interface " + self.netif)
		(code, stdout, stderr) = self.sysexec(["/sbin/ifup",self.netif])

		if code != 0:
			self.add_msg("FATAL: ifup " + self.netif + " failed")
			self.add_msg(stdout)
			self.add_msg(stderr)
			return
		else:
			self.add_msg("Started network interface " + self.netif)

		## because we set PEERDNS=no in the network settings the system has no idea, even with dhcp, what dns servers to use.
		## puppet will set them later, but we still need dns servers before that, so we'll write out a sample
		## resolv.conf to bootstrap us to puppet.
		## we set PEERDNS=no because puppet manages resolv.conf normally and we dont want the network and puppet fighting over the resolv.conf file.
		self.log.info("Saving temporary resolv.conf file")
		try:
			with open("/etc/resolv.conf", "w") as fp:
				fp.write("""search soton.ac.uk
nameserver 152.78.110.110
nameserver 152.78.111.81
nameserver 152.78.111.113
""")
		except Exception as ex:
			self.add_msg("FATAL: could not write to /etc/resolv.conf:")
			self.add_msg(str(ex))
			return

		## REGISTER WITH RHN
		self.add_msg("Preparing to register with RH Satellite")
		(code, stdout, stderr) = self.sysexec(["wget","-q","-O","/tmp/rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm","https://rhn.soton.ac.uk/pub/rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm","--no-check-certificate"])

		if code != 0:
			self.add_msg("FATAL: Could not download rhn-org-trusted-ssl-cert rpm:")
			self.add_msg(stdout)
			self.add_msg(stderr)
			return

		## See if the rpm is already installed
		(code, stdout, stderr) = self.sysexec(["/bin/rpm","-qi","rhn-org-trusted-ssl-cert"])

		if code == 0:
			self.add_msg("NOTICE: rhn-org-trusted-ssl-cert already installed")
		else:
			(code, stdout, stderr) = self.sysexec(["/bin/rpm","-ivh","/tmp/rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm"])

			if code != 0:
				self.add_msg("FATAL: Could not install rhn-org-trusted-ssl-cert rpm:")
				self.add_msg(stdout)
				self.add_msg(stderr)
				return

		(code, stdout, stderr) = self.sysexec(["/bin/wget","-q","-O","/etc/sysconfig/rhn/up2date","https://rhn.soton.ac.uk/pub/up2date","--no-check-certificate"])

		if code != 0:
			self.add_msg("FATAL: Could not download the up2date config file:")
			self.add_msg(stdout)
			self.add_msg(stderr)
			return

		(code, stdout, stderr) = self.sysexec(["/bin/wget","-q","-O","/etc/pki/rpm-gpg/ISOLUTIONS-PUBLIC-KEY","https://rhn.soton.ac.uk/pub/ISOLUTIONS-PUBLIC-KEY","--no-check-certificate"])

		if code != 0:
			self.add_msg("FATAL: Could not download the iSolutions rpm gpg key:")
			self.add_msg(stdout)
			self.add_msg(stderr)
			return

		(code, stdout, stderr) = self.sysexec(["/bin/rpm","--import","/etc/pki/rpm-gpg/ISOLUTIONS-PUBLIC-KEY"])

		if code != 0:
			self.add_msg("FATAL: Could not download the iSolutions rpm gpg key:")
			self.add_msg(stdout)
			self.add_msg(stderr)
			return

		self.add_msg("Registering with RH Satellite")

		(code, stdout, stderr) = self.sysexec('/sbin/rhnreg_ks --force --activationkey="1-768e8ff0478f68eecff9fc21b686c560"',shell=True) 

		if code != 0:
			self.add_msg("FATAL: Could not register with rhn.soton.ac.uk:")
			self.add_msg(stdout)
			self.add_msg(stderr)
			return
		else:
			self.add_msg("Satellite registration successful")

		## APPLY SOFTWARE UPDATES
		# TODO

		# a dependency on our use of puppet is lsb based facter variables
		# so we install it first.
		self.add_msg("Installing redhat-lsb-core package")
		(code, stdout, stderr) = self.sysexec("/usr/bin/yum -y install redhat-lsb-core",shell=True)

		if code != 0:
			self.add_msg("FATAL: could not install redhat-lsb-core package:")
			self.add_msg(stdout)
			self.add_msg(stderr)
			return

		## INSTALL PUPPET
		self.add_msg("Installing Puppet Enterprise")
		(code, stdout, stderr) = self.sysexec(PE_INSTALL_CMD,shell=True)

		if code != 0:
			self.add_msg("FATAL: puppet installation returned an error:")
			self.add_msg(stdout)
			self.add_msg(stderr)
			return

		## STOP PUPPET DAEMON FOR NOW
		self.add_msg("Stopping puppet daemon")
		(code, stdout, stderr) = self.sysexec(["/bin/systemctl","stop","puppet"])

		if code != 0:
			self.add_msg("FATAL: puppet stop returned an error:")
			self.add_msg(stdout)
			self.add_msg(stderr)
			return

		self.add_msg("Deploying new puppet certificate")

		## Deploy certificates and set certname option in puppet.conf
		try:
			with open(PUPPET_SSL_ROOT + "certs/" + self.fqdn + ".pem", "w") as fp:
				fp.write(self.puppet_cert)

			with open(PUPPET_SSL_ROOT + "public_keys/" + self.fqdn + ".pem", "w") as fp:
				fp.write(self.puppet_public_key)

			with open(PUPPET_SSL_ROOT + "private_keys/" + self.fqdn + ".pem", "w") as fp:
				fp.write(self.puppet_private_key)
		except Exception as ex:
			self.add_msg("FATAL: could not save puppet certificate files:")
			self.add_msg(str(ex))
			return

		self.add_msg("Applying puppet configuration")
		## we run twice just to be sure. we only care about the exit code of the second
		self.sysexec(PUPPET_BINARY + " agent --test",shell=True)
		(code, stdout, stderr) = self.sysexec(PUPPET_BINARY + " agent --test",shell=True)

		if code != 0 and code != 2:
			self.add_msg("FATAL: puppet policy failed. Please see the install.log on reboot.")
			return

		self.add_msg("Installation Complete")

		## disable setup
		## reboot

	def netcfg_remove(self,line):
		removals = ['BOOTPROTO','DHCPCLASS','NM_CONTROLLED','IPADDR','NETMASK','GATEWAY','PEERDNS']

		for bad in removals:
			if line.startswith(bad):
				return False

		return True

################################################################################
## FATAL ERROR SCREEN

	def view_fatal_error(self,message):
		div = urwid.Divider()

		bt = urwid.BigText('oh no!', font=urwid.font.HalfBlock5x4Font())
		btwp = urwid.Padding(bt, "center", 'clip')
		htxt = urwid.Text(u"A fatal error occured",align='left')
		mtxt = urwid.Text(message,align='left')

		button = urwid.Button("Exit installer")
		urwid.connect_signal(button, 'click', self.handle_exit)
		button = urwid.Padding(button,"center", width=18)

		pile = urwid.Pile([div,btwp,div,htxt,div,mtxt,div,button])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')
		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

if '__main__'==__name__:
	Bonemeal().main()
	subprocess.call(["reset"])
	print "bonemeal installer exit()"
